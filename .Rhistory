install.packages("KernSmooth")
library(KernSmooth)
exit
quit()
license()
?cor
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
print(relation)
summary(relation)
predict(relation, 150)
result <- predict(relation, 150)
result <- predict(relation, as.data.frame(150)
)
a <- data.frame(x = 170)
result <-  predict(relation,a)
View(a)
result
?lm
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
f(2)
f(0)
z
f <- function(x) {
z <- 4
x + g(x)
g <- function(y) {
y + z
}
}
f(3)
f <- function(x) {
z <- 4
g <- function(y) {
y + z
}
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
setwd("~/GitHub/rprogramming/ProgrammingAssignment2")
source('~/GitHub/rprogramming/ProgrammingAssignment2/cachematrix.R')
matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
matrix
matrix(1:4, 2, 2)
mat <- makeCacheMatrix(matrix(1:4, 2, 2))
solve(mat)
class(mat)
class(mat[[]])
mat[[1]]
solve(matrix(1:4, 2, 2))
cacheSolve(mat)
cacheSolve(mat)
cacheSolve(mat)
me <- c(1,2,3,4)
setwd("~/GitHub/rprogramming")
ls
mean(me)
source('~/GitHub/rprogramming/cacheMeanVector.R')
c <- makeVector(me)
cachemean(c)
cachemean(c)
